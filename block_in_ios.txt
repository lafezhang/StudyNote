1. block一般都是在栈上创建的，如果作为参数传给某个函数，需要将其拷贝到堆上。
   ios自带的方法，那些明确使用block的（xxxxUsingBlock, dispatch_async）都会在内部自动将其拷贝到栈上。
   如果不是这些函数，那么需要我们手动拷贝，调用 block的copy函数即可。
2. block从栈拷贝到堆发生在以下情况：
	 （1）调用block的copy
	 （2）从函数中返回block对象
	 （3）将block赋值给strong对象
	 （4）ios框架中明确使用block作为参数的函数
3.block从栈拷贝到堆，同时会引起捕获的变量从堆拷贝到栈，相当于在block对象内部有了一个与被捕获对象具有相同修饰符的成员：
     id _strong obj = [NSObject alloc] init];
     dispatch_async(main, ^{
     NSLog("%@", obk);
     }
     
     等价于
     id _strong obj = [NSObject alloc] init];
     Block bb1 = [Block alloc] init]; // Block由编译器生成的一个类
     bb1.obj = obj; // Block类内有一个obj成员，修饰符与obj一样，是strong，如果obj是weak，那么Block的obj也是weak，可以用这个来消除环引用
4.block的环引用
    @interface Test
    {
      Block blk;
    }
    
    @implelmention Test
    {
    -(id)init
    {
      blk = ^{
      NSLog("%@", self); //这里将引起blk内保留self的强引用，self对blk也有强引用，从而引起环引用
      }
    }
    
    // 解决办法一：
    -(id)init
    {
     __weak id weakself = self;
     blk = ^{
     NSLog("%@", weakself);//按照3所述，这里的block对象中得self成员也是weak修饰符
     }
    }
    }
    // 解决办法二：
    -(id)init
    {
    __block id ss = self;
      blk = ^{
      NSLog("%@", ss);
      ss = nil; //手动解除环引用
      
      }
    }
5.block与变量捕获
  block的内部结构一般具有下面的内存布局：
  Struct Block
  {
     function_pointer;  //该block将执行的函数的指针
     
     int a;     // 捕获的栈变量
     char * b;  // 捕获的栈变量
     struct_type c; //捕获的结构
     class_cpp  d; // 捕获的C++栈对象，将引起拷贝构造
     
     Block(function_pointer fp, int a, char* b, struct_type c, class_cpp d) //构造函数
     {
     	  this->function pointer = fp;
     	  this-> ....
     }
  }
  编译器在创建该block时，将直接使用捕获变量来创建Block对象，此时Block对象存在于栈上，所有block函数中使用的变量
  都变成了Block对象的成员。
  
  如果声明了一个__block 变量， 那么该变量不再是简单的int char* 等类型，而是用一个BlockByRef结构的变量：
  __block int a = 0;
  a++;
  (void)(^blk1)() = ^{a++;}
  (void)(^blk2)() = ^{a++;}
  
  转换成：
  struct BlockByRef  //__block int类型定义由编译器生成
  {
    BlockByRef* _fowarding;
    int a ;
  }
  
  struct Block
  {
     function_pointer;
     BlockByRef* a;   //捕获的是编译器转换后的类型
     
     Block(functionPointer fp, BlockByRef* a)  //构造函数
     {
      this->a = a;
     }
  }
  
  BlockByRef a = BlockByRef(&a, 0); //声明了一个BlockByRef的对象，而不是int对象
  a->_fowarding->a++;        //不再是直接使用a，而是通过其中的一个_foarding来间接使用
  Block blk1 = Block(.., &a);  //把BlockByRef传入Block，Block在函数中使用a时也是通过fowading来间接使用
  Block blk2 = Block(.., &a);// 两个block用的时同一个BlockByRef对象，因而实现了在block中共享变量
6.当一个block对象从栈拷贝到堆上，捕获的变量也会从栈拷贝到堆，如果捕获的变量是__block类型的变量，那么原BlockByRef中得
  fowarding指针会从this改为堆上新拷贝的变量，以后通过a->fowarding->a来访问的a变量的时候，访问的就是堆上的变量