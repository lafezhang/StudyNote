1.关于多线程下载：
    （1）服务器往往是nginx作为cdn，后面有多台下载服务器。客户端开多个线程，可以连接到多台实际的下载服务器，假如一台服务器提供的带宽是10K，那么5个线程就可以达到50K（前提是客户端有50K的带宽）
    （2）假如一个进程内有两个下载线程和一个ui线程，那么平均会有三分之二的时间在进行下载io，如果有九个下载线程，那么有十分之九的时间在下载，也在一定程度上提高了下载速度。但是会影响ui响应，应该取一个折中点。
    （3）一般要开多个线程下载数据，其中一些线程下载文件，另一些线程访问数据（json等），而且数据访问线程优先级要高。目的不是为了提高速度，而是能在不打断下载的情况下，有能力访问数据。
2.多线程下载为什么比单线程下载速度快？
    除去不稳定因素，单线程下载速度是固定的（取决于服务器，网络带宽，客户端处理速度）。本文假设单线程下载速度是10K/s
    下载过程虽然是IO，但是也需要CPU参与的。只有在CPU处理下载线程时，下载才真正的在进行。网卡不是DMA设备，收发数据都需要CPU，而且不能并行操作。
    假设系统内只有两个线程，每个线程时间片是1秒，那么在两秒的时间内，只有1秒的时间用于下载，另一秒时间CPU不处理下载，因此网卡处于空闲阶段，不收发任何数据。因此在2秒内只下载了10K数据。实际下载速度为5K/s
    如果增加一个下载线程，那么在3秒内，CPU有两秒的时间在进行下载，因此在3秒内将下载20K数据。实际下载速度为6.6K/s，比一个下载线程速度要快。
3.Get和Post的区别
    Get用于查询，即不会对服务器端的数据产生影响的场合；Post用于提交或者更新数据；可以说Post是Get的超集；
    Get和Post的误用会造成严重后果，因为每次Get或Post之后，浏览器都会在历史记录里边记录这次跳转，用来”后退“。某些浏览器在后退时，对Get和Post的处理是不同的，对Get的后退，直接跳转到其url；而对Post的后退则会询问是否重新提交表单。如果在Get中有更新数据的功能，则会造成两次更新，如果用Post就会得到提示。
2.关于图片加载
    即使图片已经在内存，渲染一张图片也涉及到内存IO（拷贝），费时。